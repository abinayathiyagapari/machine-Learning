import cv2
import matplotlib.pyplot as plt
import os
import numpy as np
os.chdir("C:\\Users\\abinayathiyagapari\\")
#############################################################

def sort_contours(cnts, method="left-to-right"):
    reverse = False
    i = 0

    if method == "right-to-left" or method == "bottom-to-top":
        reverse = True

    if method == "top-to-bottom" or method == "bottom-to-top":
        i = 1

    boundingBoxes = [cv2.boundingRect(c) for c in cnts]
    (cnts, boundingBoxes) = zip(*sorted(zip(cnts, boundingBoxes),
        key=lambda b:b[1][i], reverse=reverse))

    return cnts
############################################################
    
img = cv2.imread('level1\\5.jpg',cv2.COLOR_BGR2GRAY)



gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) 
   
#(thresh, gray) = cv2.threshold(gray, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)

edged = cv2.Canny(gray, 100, 200) 

kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(1,2))
dilation = cv2.dilate(edged,kernel,iterations = 2)

plt.imshow(dilation)
cnts, hierarchy = cv2.findContours(dilation.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
cnts = sort_contours(cnts)

rects = []
c1=19
for c in cnts:
    peri = cv2.arcLength(c, True)
    approx = cv2.approxPolyDP(c, 0.02 * peri, True)
    x, y, w, h = cv2.boundingRect(approx)
    if h >= 10:
        print("yes")
        #split an level_1 image in to level_2
        plt.imsave("C:\\Users\\abinayathiyagapari\\level_2\\"+str(c1)+".jpg", img[y:y+h,x:x+w])
        print("yes")
        c1+=1
############################################################################
img = cv2.imread('1.jpeg',cv2.COLOR_BGR2GRAY)  #read an image 

gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) 

(thresh, gray) = cv2.threshold(gray, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)

edged = cv2.Canny(gray, 100, 300) 

kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(5,5))
dilation = cv2.dilate(edged,kernel,iterations = 2)

plt.imshow(dilation)
cnts, hierarchy = cv2.findContours(dilation.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
cnts = sort_contours(cnts)

rects = []
c1=1
for c in cnts:
    peri = cv2.arcLength(c, True)
    approx = cv2.approxPolyDP(c, 0.02 * peri, True)
    x, y, w, h = cv2.boundingRect(approx)
    if h >= 10:
        print("yes")
        #save an input splitted image in to level_1 file
        plt.imsave("C:\\Users\\abinayathiyagapari\\level_1\\"+str(c1)+".jpg", img[y:y+h,x:x+w])
        print("yes")
        c1+=1
